#!/bin/bash

set -e          # exit on error
set -o pipefail # exit on pipeline error
set -u          # treat unset variable as error

. /minioslib || exit 1

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

#pkg update
# install packages
#if [ -f $SCRIPT_DIR/package.list ]; then
#    install_packages
#fi


#######################
# Install Virt-Manager
#######################
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
APP="virt-manager"
APP_NAME="Virtual Machine Manager"
APP_GROUP="libvirt"

# install packages
pkg update
pkg install \
    qemu-kvm \
    qemu-utils \
    libvirt-clients \
    libvirt-daemon-system \
    bridge-utils \
    virt-manager \
    gir1.2-spiceclientgtk-3.0

cat <<EOF >/usr/bin/$APP-allowuser.sh
#!/bin/bash
if ! grep $APP_GROUP /etc/group | grep \$(id -nu 1000) >/dev/null; then
    usermod -a -G $APP_GROUP \$(id -nu 1000)
fi
EOF
chmod +x /usr/bin/$APP-allowuser.sh
cat <<EOF >/usr/lib/systemd/system/$APP-allowuser.service
[Unit]
Description=Allow user to use $APP_NAME
#After=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/$APP-allowuser.sh
RemainAfterExit=true
ExecStop=
StandardOutput=journal

[Install]
WantedBy=multi-user.target
EOF
systemctl enable $APP-allowuser.service

PACKAGE="virt-manager"
echo "PACKAGE=$PACKAGE" >/.package
echo "VERSION=$(dpkg -s $PACKAGE | grep Version | sed 's/Version: //g' | sed 's/:/-/g')" >>/.package


##################
# Docker install
##################

pkg update
pkg install ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list >/dev/null

pkg update
pkg install apparmor docker.io containerd docker-buildx-plugin docker-compose-plugin
#pkg install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
systemctl enable docker


#pkg install docker-ce docker-ce-cli containerd.io #docker-compose-plugin

# Portianer <<Innecesario>>
# get_latest_package_url() {
#     curl --silent "https://api.github.com/repos/$1/releases/latest" |           # Get latest release from GitHub api
#         grep '"browser_download_url":' | grep "$DISTRIBUTION_ARCH.tar.gz"\" | # Get tag line
#         sed -E 's/.*"([^"]+)".*/\1/'                                          # Pluck JSON value
# }

# URL=$(get_latest_package_url portainer/portainer)

# wget $URL &&
#     tar -xzvf ./$(ls portainer*$DISTRIBUTION_ARCH.tar.gz) -C /opt
#     rm -f ./$(ls portainer*$DISTRIBUTION_ARCH.tar.gz)

# cat <<EOF >/usr/lib/systemd/system/portainer.service
# [Unit]
# Description=Portainer
# Wants=network-online.target
# After=network-online.target docker.service
# Requires=docker.service

# [Service]
# TimeoutStartSec=0
# Restart=always
# ExecStart=/opt/portainer/portainer --no-analytics -H unix:///var/run/docker.sock
# #ExecStop=

# [Install]
# WantedBy=multi-user.target
# EOF

# systemctl enable portainer



